A01 :-
--------
int a = 0, b = 0; 
for (i = 0; i < N; i++) { 
    a = a + rand(); 
} 
for (j = 0; j < M; j++) { 
    b = b + rand(); 
}

Ans : O(N + M) time, O(1) space


A02 :-
--------
int a = 0; 
for (i = 0; i < N; i++) { 
    for (j = N; j > i; j--) { 
        a = a + i + j; 
    } 
}

Ans : O(N*N)


A03 :-
---------
int i, j, k = 0; 
for (i = n / 2; i <= n; i++) { 
    for (j = 2; j <= n; j = j * 2) { 
        k = k + n / 2; 
    } 
}

Ans : O(nLogn)


A04 :-
--------
int a = 0, i = N; 
while (i > 0) { 
    a += i; 
    i /= 2; 
}

Ans : O(log n)


A05 :-
--------
The complexity of Binary search algorithm is

Ans : O(log n)


A06 :-
--------
If for an algorithm time complexity is given by O(1) then complexityof it is:

Ans : constant


A07 :-
--------
If for an algorithm time complexity is given by O(log2n) then complexity will:

Ans : None of the mentioned (Options were : polynomial, exponential, constant, NOTA)


A08 :-
--------
If for an algorithm time complexity is given by O(n) then complexityof it is:

Ans : linear


A09 :-
--------
If for an algorithm time complexity is given by O((3/2)^n) then complexity will:

Ans : exponential


A10 :-
--------
The complexity of linear search algorithm is

Ans : O(n)


A11 :-
---------
int i, j, k = 0;
for (i = n / 2; i <= n; i++) 
{
for (j = 2; j <= n; j = j * 2) 
{
k = k + n / 2;
}
}

Ans : O(nlogn)


A12 :-
---------
void solve(){
   for(int i = n; i > 0; i/=2){
       if(i%2 == 0){
           for(int j = 1; j <= n * n; j+=2){
               // O(1) operation
           }
       }
   }  
}

Ans : O(n^2 logn)


A13 :-
--------
void solve(){
    int i = 1;
    while(i < n){
        int x = i;
        while(x--){
            // O(1) operation
        }
        i++;
    }
}

Ans : O(n^2)

